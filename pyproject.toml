[tool.poetry]
name = "pdf-reader"
version = "0.1.0"
description = "A FastAPI PDF Reader with Q&A"
authors = ["kshitizkoirala <kshitizkoirala01@gmail.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.12"
fastapi = {extras = ["standard"], version = ">=0.115.12,<0.116.0"}
sentence-transformers = ">=4.1.0,<5.0.0"
pymupdf = "^1.26.0"
qdrant-client = "^1.14.2"
streamlit = "^1.45.1"
pytest = "^8.3.5"
pytest-asyncio = "^1.0.0"
pytest-mock = "^3.14.1"
httpx = "^0.28.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.11"
pre-commit = "^4.2.0"


[tool.ruff]
line-length = 88
target-version = "py311"
fix = true

# Enable Ruff's formatter
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# Enable commonly used rulesets
[tool.ruff.lint]
select = [
  "E",    # pycodestyle errors => Style errors like indentation, whitespace
  "F",    # pyflakes => Basic error detection like undefined names
  "I",    # isort => Import sorting issues
  "UP",   # pyupgrade => Checks for outdated Python syntax and suggests upgrades
  "B",    # flake8-bugbear => Checks for likely bugs and design problems
  "C90",  # mccabe complexity => Measures the cyclomatic complexity of functions
  "N",    # pep8-naming => Naming convention checks
  "PL",   # pylint rules => Pylint-like linting rules (subset)
  "RUF",  # Ruff-specific rules => Custom Ruff checks
]
ignore = [
  "E501",  # Line too long (ruff formatter will handle this)
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-single-line = false
lines-between-types = 1
combine-as-imports = true


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
